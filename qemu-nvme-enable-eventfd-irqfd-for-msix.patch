From 560b232d88bd66cd6ae5063523c08fde19706c2d Mon Sep 17 00:00:00 2001
From: Dongli Zhang <dongli.zhang0129@gmail.com>
Date: Thu, 28 Feb 2019 16:33:16 +0800
Subject: [PATCH 1/1] nvme: enable eventfd/irqfd for msix

This is based on qemu-3.0.0.

Signed-off-by: Dongli Zhang <dongli.zhang0129@gmail.com>
---
 hw/block/nvme.c | 112 +++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 hw/block/nvme.h |  10 +++++
 hw/pci/msix.c   |   3 +-
 3 files changed, 123 insertions(+), 2 deletions(-)

diff --git a/hw/block/nvme.c b/hw/block/nvme.c
index 5e508ab..9454802 100644
--- a/hw/block/nvme.c
+++ b/hw/block/nvme.c
@@ -29,9 +29,11 @@
 #include "qemu/units.h"
 #include "hw/block/block.h"
 #include "hw/hw.h"
+#include "hw/pci/msi.h"
 #include "hw/pci/msix.h"
 #include "hw/pci/pci.h"
 #include "sysemu/sysemu.h"
+#include "sysemu/kvm.h"
 #include "qapi/error.h"
 #include "qapi/visitor.h"
 #include "sysemu/block-backend.h"
@@ -111,7 +113,10 @@ static void nvme_irq_assert(NvmeCtrl *n, NvmeCQueue *cq)
     if (cq->irq_enabled) {
         if (msix_enabled(&(n->parent_obj))) {
             trace_nvme_irq_msix(cq->vector);
-            msix_notify(&(n->parent_obj), cq->vector);
+            if (n->use_eventfd)
+                event_notifier_set(&n->guest_notifier[cq->vector]);
+            else
+                msix_notify(&(n->parent_obj), cq->vector);
         } else {
             trace_nvme_irq_pin();
             assert(cq->cqid < 64);
@@ -1197,6 +1202,91 @@ static const MemoryRegionOps nvme_cmb_ops = {
     },
 };
 
+static int nvme_msix_vector_use_notifier(PCIDevice *dev, unsigned vector,
+                                         MSIMessage msg)
+{
+    NvmeCtrl *n = NVME(dev);
+    NvmeIRQFD *irqfd = &n->vector_irqfd[vector];
+    EventNotifier *notifier = &n->guest_notifier[vector];
+    int ret;
+
+    if (!n->use_eventfd)
+	    return -EFAULT;
+
+    if (!irqfd->enabled) {
+        ret = event_notifier_init(notifier, 0);
+	if (ret < 0) {
+            printf("event_notifier_init() failure for vector = %d\n",
+                   vector);
+            goto failed;
+	}
+
+	ret = kvm_irqchip_add_msi_route(kvm_state, vector, dev);
+	if (ret < 0) {
+            printf("kvm_irqchip_add_msi_route() failure for vector = %d\n",
+                   vector);
+            goto failed;
+	}
+
+	irqfd->virq = ret;
+	irqfd->enabled = true;
+    }
+
+    if (irqfd->msg.data != msg.data || irqfd->msg.address != msg.address) {
+        ret = kvm_irqchip_update_msi_route(kvm_state, irqfd->virq,
+                                           msg, dev);
+	if (ret < 0) {
+            printf("kvm_irqchip_update_msi_route() failure for vector = %d\n",
+                   vector);
+            goto failed;
+        }
+
+	kvm_irqchip_commit_routes(kvm_state);
+    }
+
+    ret = kvm_irqchip_add_irqfd_notifier_gsi(kvm_state, notifier,
+                                             NULL, irqfd->virq);
+    if (ret < 0) {
+        printf("kvm_irqchip_add_irqfd_notifier_gsi() failure for vector = %d\n",
+               vector);
+        goto failed;
+    }
+
+    return 0;
+
+failed:
+
+    n->use_eventfd = false;
+    return -EFAULT;
+}
+
+static void nvme_msix_vector_release_notifier(PCIDevice *dev,
+                                              unsigned vector)
+{
+    NvmeCtrl *n = NVME(dev);
+    NvmeIRQFD *irqfd = &n->vector_irqfd[vector];
+    EventNotifier *notifier = &n->guest_notifier[vector];
+    int ret;
+
+    if (!n->use_eventfd)
+        return;
+
+    ret = kvm_irqchip_remove_irqfd_notifier_gsi(kvm_state, notifier,
+                                                irqfd->virq);
+    if (ret) {
+        printf("kvm_irqchip_remove_irqfd_notifier_gsi() failure for vector = %d\n",
+               vector);
+	n->use_eventfd = false;
+    }
+}
+
+static void nvme_msix_vector_poll_notifier(PCIDevice *dev,
+                                           unsigned int vector_start,
+                                           unsigned int vector_end)
+{
+    /* TODO */
+}
+
 static void nvme_realize(PCIDevice *pci_dev, Error **errp)
 {
     NvmeCtrl *n = NVME(pci_dev);
@@ -1322,6 +1412,19 @@ static void nvme_realize(PCIDevice *pci_dev, Error **errp)
             cpu_to_le64(n->ns_size >>
                 id_ns->lbaf[NVME_ID_NS_FLBAS_INDEX(ns->id_ns.flbas)].ds);
     }
+
+    if (n->use_eventfd) {
+        n->vector_irqfd = g_malloc0(sizeof(*n->vector_irqfd) * n->num_queues);
+	n->guest_notifier = g_malloc0(sizeof(*n->guest_notifier) * n->num_queues);
+
+	if (msix_set_vector_notifiers(pci_dev,
+                                      nvme_msix_vector_use_notifier,
+                                      nvme_msix_vector_release_notifier,
+                                      nvme_msix_vector_poll_notifier) < 0) {
+		n->use_eventfd = false;
+		error_setg(errp, "failed to init vector notifier");
+        }
+    }
 }
 
 static void nvme_exit(PCIDevice *pci_dev)
@@ -1337,6 +1440,12 @@ static void nvme_exit(PCIDevice *pci_dev)
     }
 
     msix_uninit_exclusive_bar(pci_dev);
+
+    if (n->vector_irqfd)
+        g_free(n->vector_irqfd);
+
+    if (n->guest_notifier)
+        g_free(n->guest_notifier);
 }
 
 static Property nvme_props[] = {
@@ -1344,6 +1453,7 @@ static Property nvme_props[] = {
     DEFINE_PROP_STRING("serial", NvmeCtrl, serial),
     DEFINE_PROP_UINT32("cmb_size_mb", NvmeCtrl, cmb_size_mb, 0),
     DEFINE_PROP_UINT32("num_queues", NvmeCtrl, num_queues, 64),
+    DEFINE_PROP_BOOL("eventfd", NvmeCtrl, use_eventfd, true),
     DEFINE_PROP_END_OF_LIST(),
 };
 
diff --git a/hw/block/nvme.h b/hw/block/nvme.h
index cabcf20..c7c61b7 100644
--- a/hw/block/nvme.h
+++ b/hw/block/nvme.h
@@ -57,6 +57,12 @@ typedef struct NvmeNamespace {
 #define NVME(obj) \
         OBJECT_CHECK(NvmeCtrl, (obj), TYPE_NVME)
 
+typedef struct NvmeIRQFD{
+    MSIMessage msg;
+    int virq;
+    bool enabled;
+} NvmeIRQFD;
+
 typedef struct NvmeCtrl {
     PCIDevice    parent_obj;
     MemoryRegion iomem;
@@ -87,6 +93,10 @@ typedef struct NvmeCtrl {
     NvmeSQueue      admin_sq;
     NvmeCQueue      admin_cq;
     NvmeIdCtrl      id_ctrl;
+
+    bool use_eventfd;
+    EventNotifier *guest_notifier;
+    NvmeIRQFD *vector_irqfd;
 } NvmeCtrl;
 
 #endif /* HW_NVME_H */
diff --git a/hw/pci/msix.c b/hw/pci/msix.c
index c944c02..54bb0aa 100644
--- a/hw/pci/msix.c
+++ b/hw/pci/msix.c
@@ -162,7 +162,8 @@ void msix_write_config(PCIDevice *dev, uint32_t addr,
         return;
     }
 
-    pci_device_deassert_intx(dev);
+    /* comment this just for fun :) */
+    //pci_device_deassert_intx(dev);
 
     if (dev->msix_function_masked == was_masked) {
         return;
-- 
2.7.4

